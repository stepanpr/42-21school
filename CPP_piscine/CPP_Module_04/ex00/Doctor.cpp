
#include "Doctor.hpp"

//==================================CANONIC=FORM===============================

Doctor::Doctor(std::string name) :  Victim(name), _name(name)  	//–ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ–±—ä–µ–∫—Ç–∞, 
{																//–ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–æ–ª—É—á–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ name –ø–æ–ª—é _name, 
	std::cout << "   üßî Whom to treat?" << std::endl;			//–∞ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–¥–∞–µ–º name –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∫–ª–∞—Å—Å–∞ Victim
}

Doctor::Doctor(Doctor const & src) : Victim(src)
{
	std::cout << "   üßî Whom to treat?" << std::endl;
}

Doctor &Doctor::operator=(const Doctor& rhs)
{
	Victim::operator=(rhs);
	this->_name = rhs.getName();
	return (*this);
}

Doctor::~Doctor()
{
	std::cout << "   üßî Oh nooo" << std::endl;
}

//==================================OVERLOAD=OF=THE=<<==========================

std::ostream &operator<<(std::ostream &out, Doctor &tmp)
{
	std::cout << tmp.sayHello();
	return out;
}

//====================================GETTERS===================================

std::string Doctor::getName() const { return this->_name; }

//====================================ACTIONS===================================

std::string Doctor::sayHello() const
{
	return " üßîüí¨ I am " + this->getName() + " and I like camels!\n";
}

void Doctor::getPolymorphed() const
{
	std::cout << " ‚ú®üê´ " << this->getName() <<" has been turned into a camel!" << std::endl;
}
